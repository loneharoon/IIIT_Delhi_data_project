runApp('R_Codes/R_apps/IIIT_energyVis')
print(cat("Features Present:", present_features,sep = ","))
runApp('R_Codes/R_apps/IIIT_energyVis')
print('hi',c(1,2,))
print('hi',c(1,2))
paste('hi',c(1,2))
?paste
st <- "hi" + "dd"
st <- "hi", "dd"
sprintf('hi','hellos')
print(present_features)
runApp('R_Codes/R_apps/IIIT_energyVis')
print({
print(paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")))
present_features <- colnames(df)
print(present_features)
})
runApp('R_Codes/R_apps/IIIT_energyVis')
print(cat("hello","hi"))
print(cat("hello","hi",sep = ""))
print(cat("hello","hi",sep = "\t"))
print(cat("hello","hi",sep = "\n"))
print(cat("hello","hi")sep = "\n")
print(cat("hello","hi",sep = "\n"))
cat("hello","hi",sep = "\n")
runApp('R_Codes/R_apps/IIIT_energyVis')
cat(present_features,sep = ",")
paste(present_features,sep = ",")
paste0(present_features,sep = ",")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " "))),
cat(present_features,sep = ",")
# #print(present_features)
,sep="\n")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
cat(present_features,sep = ",")
# #print(present_features)
,sep="\n")
paste0(present_features,sep = ",")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
cat(present_features,sep = ",")
# #print(present_features)
,sep="\n")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste(present_features,sep = ",")
# #print(present_features)
,sep="\n")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste0(present_features,sep = ",")
# #print(present_features)
,sep="\n")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste0(present_features,sep = "\t")
# #print(present_features)
,sep="\n")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste0(present_features,sep = "\t")
# #print(present_features)
,sep="\t")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste0(present_features,sep = "\t")
# #print(present_features)
,sep=";")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste0(present_features,sep = ",")
# #print(present_features)
,sep=";")
cat(
paste("Dataset FROM:", as.character(as.Date(df$timestamp[1])), "TO", as.character(as.Date(df$timestamp[nrow(df)]),sep = " ")),
paste0(present_features)
# #print(present_features)
,sep=";")
runApp('R_Codes/R_apps/IIIT_energyVis')
?fread
runApp('R_Codes/R_apps/IIIT_energyVis')
dev.off()
runApp('R_Codes/R_apps/IIIT_energyVis')
rm(list=ls())
runApp('R_Codes/R_apps/IIIT_energyVis')
runApp('R_Codes/R_apps/AravaliVis')
?ggplotly
visualize_dataframe_all_columns(df_xts[,'power']['2014'])
library(ggplot2)
library(scales)
visualize_dataframe_all_columns <- function(xts_data) {
library(RColorBrewer)# to increase no. of colors
library(plotly)
# VISUALIZE SPECiFIC PORTION OF DATA
#http://novyden.blogspot.in/2013/09/how-to-expand-color-palette-with-ggplot.html
#dframe <- data_10min["2014-08-9"]
dframe <- data.frame(timeindex=index(xts_data),coredata(xts_data))
# dframe$dataid <- NULL ; dframe$air1 <-NULL ; dframe$use<- NULL ; dframe$drye1 <- NULL
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
colourCount = length(unique(df_long$variable))
getPalette = colorRampPalette(brewer.pal(8, "Dark2"))(colourCount) # brewer.pal(8, "Dark2") or brewer.pal(9, "Set1")
g <- ggplot(df_long,aes(timeindex,value,col=variable,group=variable))
g <- g + geom_line() + scale_colour_manual(values=getPalette)
ggplotly(g)
}
visualize_month_data_facet_form <- function(df,column_name){
month_data <- df
month_data <- month_data[,column_name]
colnames(month_data) <- "power"
#browser()
month_data$day <- lubridate::day(index(month_data))
month_data$time <- lubridate::hour(index(month_data)) * 60 + lubridate::minute(index(month_data))
# df_long <- reshape2::melt(coredata(month_data),id.vars=c("time","day"))
g <- ggplot(as.data.frame(coredata(month_data)),aes(time,power)) + geom_line() + facet_wrap(~day,ncol=7)
print(g)
}
visualize_dataframe_one_column_facet_form <- function(xts_data,ncol) {
data <- xts_data/1000
dframe <- data.frame(timeindex=index(data),coredata(data))
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
df_long$month <- lubridate::month(df_long$timeindex)
g <- ggplot(df_long,aes(timeindex,value,group=variable)) + facet_wrap(~month,ncol = ncol,scales="free_x") + geom_line()
g <- g + labs(x= "Day of the month", y="Power (kW)") + scale_x_datetime(labels=date_format("%d"))
g
}
visualize_dataframe_all_columns_facet_form <- function(xts_data,ncol) {
data <- xts_data/1000
dframe <- data.frame(timeindex=index(data),coredata(data))
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
df_long$month <- lubridate::month(df_long$timeindex)
g <- ggplot(df_long,aes(timeindex,value,col=variable,group=variable)) + facet_wrap(~month,ncol = ncol,scales="free_x") + geom_line()
g <- g + labs(x= "Day of the month",y="Power (kW)") + scale_x_datetime(labels=date_format("%d"))
g
}
visualize_dataframe_all_columns(df_xts[,'power']['2014'])
def_path_proc <- "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/processed/"
meter <- "acad_build_mains.csv"
df <- fread(paste0(def_path_proc,meter),nrows=10)
df_xts <- xts(df[,2:NCOL(df)], fasttime::fastPOSIXct(df$timestamp)-19800)
visualize_dataframe_all_columns(df_xts[,'power']['2014'])
head(df_xts)
df <- fread(paste0(def_path_proc,meter),nrows=400)
df_xts <- xts(df[,2:NCOL(df)], fasttime::fastPOSIXct(df$timestamp)-19800)
visualize_dataframe_all_columns(df_xts[,'power']['2014'])
visualize_dataframe_all_columns(df_xts)
runApp('R_Codes/R_apps/IIIT_energyVis')
shiny::runApp('R_Codes/R_apps/IIIT_energyVis')
runApp('R_Codes/R_apps/IIIT_energyVis')
df
library(data.table)
def_path_proc <- "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/processed/"
meter <- "acad_build_mains.csv"
df <- fread(paste0(def_path_proc,meter))
startdate <- fastPOSIXct(paste0("2014-01-01",' ',"00:00:00"))-19800
enddate <- fastPOSIXct(paste0("2014-12-01",' ',"23:59:59"))-19800
dframe <- df[df$timestamp >= startdate & df$timestamp <= enddate,] #reduced
library(dplyr)
?filter
dt <- filter(df,timestamp >= startdate, df$timestamp <= enddate)
tb_data <- tbl_df(df)
glimpse(tb_data)
dt <- filter(tb_data,timestamp >= startdate, df$timestamp <= enddate)
str(df)
df$timestamp <- fastPOSIXct(df$timestamp)-19800
head(df)
str(df)
tb_data <- tbl_df(df)
print(tb_data)
dt <- filter(tb_data,timestamp >= startdate, df$timestamp <= enddate)
head(dt)
dframe <- df[df$timestamp >= startdate & df$timestamp <= enddate,] #reduced
df <- fread(paste0(def_path_proc,meter))
df$timestamp <- fastPOSIXct(df$timestamp)-19800
startdate <- fastPOSIXct(paste0("2014-01-01",' ',"00:00:00"))-19800
enddate <- fastPOSIXct(paste0("2014-12-01",' ',"23:59:59"))-19800
dframe <- df[df$timestamp >= startdate & df$timestamp <= enddate,] #reduced
df_long <- reshape2::melt(dframe,id.vars = "timestamp")
colourCount = length(unique(df_long$variable))
scheme <- iwanthue() # for distint colors
getPalette = scheme$hex(colourCount)
# browser()
g <- ggplot(df_long, aes(timestamp, value, col = variable, group = variable))
g
g <- g + geom_line() + scale_colour_manual(values = getPalette) + labs(y ="Value")
g
library(data.table)
library(xts)
library(fasttime)
def_path_proc <- "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/processed/"
meter <- "acad_build_mains.csv"
df <- fread(paste0(def_path_proc,meter))
df$timestamp <- fastPOSIXct(df$timestamp)-19800
startdate <- fastPOSIXct(paste0("2014-01-01",' ',"00:00:00"))-19800
enddate <- fastPOSIXct(paste0("2014-01-30",' ',"23:59:59"))-19800
dframe <- df[df$timestamp >= startdate & df$timestamp <= enddate,] #reduced
dim(dframe)
enddate <- fastPOSIXct(paste0("2014-01-10",' ',"23:59:59"))-19800
dframe <- df[df$timestamp >= startdate & df$timestamp <= enddate,] #reduced
l <- dframe[,1:2]
l %>% ggvis(~timestamp,~power) %>% layer_paths()
library(ggvis)
l <- dframe[,1:2]
l %>% ggvis(~timestamp,~power) %>% layer_paths()
library(ggplot2)
ggplot2(l,aes(timestamp,power)) + geom_line()
ggplot(l,aes(timestamp,power)) + geom_line()
?sliderInput
enddate <- fastPOSIXct(paste0("2014-01-30",' ',"23:59:59"))-19800
dframe <- df[df$timestamp >= startdate & df$timestamp <= enddate,] #reduced
l <- dframe[,1:2]
ggplot(l,aes(timestamp,power)) + geom_line()
l %>% ggvis(~timestamp,~power) %>% layer_paths()
shiny::runApp('R_Codes/R_apps/IIIT_energyVis')
runApp('R_Codes/R_apps/IIIT_energyVis')
df_xts <- xts(df[,2:NCOL(df)], fastPOSIXct(df$timestamp)-19800)
library(data.table)
library(xts)
library(fasttime)
def_path_proc <- "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/processed/"
meter <- "acad_build_mains.csv"
df <- fread(paste0(def_path_proc,meter))
df_xts <- xts(df[,2:NCOL(df)], fastPOSIXct(df$timestamp)-19800)
startdate <- fastPOSIXct(paste0("2014-01-01",' ',"00:00:00"))-19800
enddate <- fastPOSIXct(paste0("2014-01-30",' ',"23:59:59"))-19800
startdate
enddate
df_sub <- df_xts[startdate/enddate]
paste0(startdate,"/",enddate)
df_sub <- df_xts[paste0(startdate,"/",enddate)]
head(df_sub)
tail(df_sub)
df_sub[,"power"]
visualize_dataframe_all_columns(df_sub[,'power'])
visualize_dataframe_all_columns <- function(xts_data) {
library(RColorBrewer)# to increase no. of colors
library(plotly)
# VISUALIZE SPECiFIC PORTION OF DATA
#http://novyden.blogspot.in/2013/09/how-to-expand-color-palette-with-ggplot.html
#dframe <- data_10min["2014-08-9"]
dframe <- data.frame(timeindex=index(xts_data),coredata(xts_data))
# dframe$dataid <- NULL ; dframe$air1 <-NULL ; dframe$use<- NULL ; dframe$drye1 <- NULL
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
colourCount = length(unique(df_long$variable))
getPalette = colorRampPalette(brewer.pal(8, "Dark2"))(colourCount) # brewer.pal(8, "Dark2") or brewer.pal(9, "Set1")
g <- ggplot(df_long,aes(timeindex,value,col=variable,group=variable))
g <- g + geom_line() + scale_colour_manual(values=getPalette)
ggplotly(g)
}
visualize_dataframe_all_columns(df_sub[,'power'])
startdate <- fastPOSIXct(paste0("2013-08-01",' ',"00:00:00"))-19800
enddate <- fastPOSIXct(paste0("2013-08-30",' ',"23:59:59"))-19800
df_sub <- df_xts[paste0(startdate,"/",enddate)]
visualize_dataframe_all_columns(df_sub[,'power'])
visualize_dataframe_all_columns(df_sub[,'energy'])
visualize_dataframe_all_columns(df_sub[,'current'])
visualize_dataframe_all_columns(df_sub[,'frequency'])
visualize_dataframe_all_columns(df_sub[,'power_factor'])
visualize_dataframe_all_columns(df_sub[,'voltage'])
enddate <- fastPOSIXct(paste0("2013-08-31",' ',"23:59:59"))-19800
df_sub <- df_xts[paste0(startdate,"/",enddate)]
tail(df_sub)
startdate <- fastPOSIXct(paste0("2013-09-01",' ',"00:00:00"))-19800
enddate <- fastPOSIXct(paste0("2013-09-31",' ',"23:59:59"))-19800
df_sub <- df_xts[paste0(startdate,"/",enddate)]
visualize_dataframe_all_columns(df_sub[,'power'])
visualize_dataframe_all_columns(df_sub[,'energy'])
visualize_dataframe_all_columns(df_sub[,'current'])
visualize_dataframe_all_columns(df_sub[,'voltage'])
visualize_dataframe_all_columns(df_sub[,'power_factor'])
visualize_dataframe_all_columns(df_sub[,'frequency'])
visualize_dataframe_all_columns(df_sub[,'power'])
visualize_dataframe_all_columns(df_sub[,'energy'])
visualize_dataframe_all_columns(df_sub[,'voltage'])
visualize_dataframe_all_columns(df_sub[,'frequency'])
visualize_dataframe_all_columns(df_sub[,'voltage'])
visualize_dataframe_all_columns(df_sub[,'current'])
dev.off()
rm(list=ls())
library(RSmap)
library(xts)
RSmap("http://energy.iiitd.edu.in:9102/backend")
library(data.table)
library(xts)
#girls_hostel_mains.csv, boys_hostel_mains.csv,acad_build_mains,fac_build_mains,lecture_build_mains,
setwd("/Volumes/MacintoshHD2/Users/haroonr/Dropbox/R_codesDirectory/R_Codes/IIIT_Delhi_data_project/reports/figures/")
file = "facilities_build_mains.csv"
df = fread(paste0(dir,file))
dir
dir()
dir
direc  = "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/power/"
file = "facilities_build_mains.csv"
df = fread(paste0(direc,file))
df_xts <- xts(df$power,fasttime::fastPOSIXct(df$timestamp)-19800) # subtracting5:30 according to IST
df_sample <- resample_data_minutely(df_xts,15) #downsample
library(xts)
library(data.table)
library(gtools)
create_minutely <- function(){
# this function is used to down sample data
library(gtools)
month = "default"
parent <- "/Volumes/MacintoshHD2/Users/"
dfiles <- mixedsort(list.files(paste0(parent,month,"/"),pattern = "*.csv"))
lapply(dfiles, function(x){
df <- fread(paste0(parent,month,"/",x),header = TRUE)
df_xts <- xts(df$power,fasttime::fastPOSIXct(df$timestamp)-19800) # subtracting5:30 according to IST
duplicate_rno <- which(duplicated(index(df_xts)))  #remvove duplicates
if(length(duplicate_rno) > 0 ){
df_xts <- df_xts[-duplicate_rno,] }
sampled_df_xts <- resample_data_minutely(df_xts,1) # convert to minutely format
stopifnot(length(unique(lubridate::second(sampled_df_xts)))==1) # ensures series end at 0 seconds
write.csv(data.frame(timestamp=index(sampled_df_xts),power=round(coredata(sampled_df_xts),3)),file=paste0(parent,"minutely/",x),row.names = FALSE)
})
}
resample_data_minutely <- function(xts_datap,xminutes) {
#This function resamples input xts data to xminutes rate
ds_data <- period.apply(xts_datap,INDEX = endpoints(index(xts_datap)-3600*0.5, on = "minutes", k = xminutes ), FUN= mean) # subtracting half hour to align IST hours
align_data <- align.time(ds_data,xminutes*60) # aligning to x seconds
rm(ds_data)
return(align_data)
}
fill_missing_readings_with_NA <- function(org_xts,samp_duration) {
# function used to fill missing values with NA
# input-  org_xts <- xts data, samp_duration: sampling duration of input data
timerange = seq(start(org_xts),end(org_xts), by = samp_duration) # assuming original object is hourly sampled
temp = xts(rep(NA,length(timerange)),timerange)
complete_xts = merge(org_xts,temp)[,1]
colnames(complete_xts) <- NULL
return(complete_xts)
}
create_year_data_NA <- function(year,sampling){
# this function creates dummy timeseries filled with NA values of given year at provided sammping rate
# year = '2016'
#sampling = '15 mins'
timerange = seq(as.POSIXct(paste0(year,'-01-01')),as.POSIXct(paste0(year,'-12-31 23:59:59')), by = sampling) # assuming original object is hourly sampled
temp = xts(rep(NA,length(timerange)),timerange)
return(temp)
}
create_NA_timeseries_data <- function(string_start,string_end,sampling){
# this function creates dummy timeseries filled with NA values at provided sammping rate
#sampling = '15 mins'
timerange = seq(as.POSIXct(string_start),as.POSIXct(string_end), by = sampling) # assuming original object is hourly sampled
temp = xts(rep(NA,length(timerange)),timerange)
return(temp)
}
create_NA_timeseries_tibble <- function(string_start,string_end,sampling){
# this function creates dummy timeseries tibble filled with NA values at provided sammping rate
#sampling = '15 mins'
timerange = seq(as.POSIXct(string_start),as.POSIXct(string_end), by = sampling) # assuming original object is hourly sampled
temp = xts(rep(NA,length(timerange)),timerange)
tbl <- myxts_tbl(temp)
return(tbl)
}
resample_tbl_data_minutely <- function(tbl_datap,xminutes) {
#This function resamples input xts data to xminutes rate
xts_datap <- tbl_datap %>% mytbl_xts()
ds_data <- period.apply(xts_datap,INDEX = endpoints(index(xts_datap)-3600*0.5, on = "minutes", k = xminutes ), FUN= mean) # subtracting half hour to align IST hours
align_data <- align.time(ds_data,xminutes*60) # aligning to x seconds
rm(ds_data)
tbl <- myxts_tbl(align_data)
return(tbl)
}
mytbl_xts <- function(tbldata){
library(xts)
# converts tibble object to xts object
if(any(class(tbldata$timestamp) == "POSIXct")){
xtsob <- xts(as.data.frame(tbldata[,2:NCOL(tbldata)]),tbldata$timestamp)
return(xtsob)
} else{
stop("INput timebased column")
}
myxts_tbl <- function(xtsdata){
mytib <- data.frame(date = index(xtsdata), coredata(xtsdata)) %>% tbl_df()
colnames(mytib)[1] <- 'timestamp'
return(mytib)
}
df_sample <- resample_data_minutely(df_xts,15) #downsample
df_year <- split.xts(df_sample,f="years",k=1) # yearwise break
# fill missing readings with NA
df_year_full <- lapply(df_year,function(x) fill_missing_readings_with_NA(x,"15 mins"))
change_year <- function(xts_yeardata){
#function used to change the year of given input xts timeseries
y = xts_yeardata
year = unique(lubridate::year(index(y)))
if(year==2016){
step = 0
}else if(year > 2016){
step = 2016-year
}else{
step = 2016-year
}
print(step)
index(y) <- index(y) + step * 365*24*60*60
return(y)
}
same_year <- lapply(df_year_full, function(y) {
change_year(y)
})
dummy_year <- create_year_data_NA('2016','15 mins') #create dummy year NA data
updated_same_year <- c(list(dummy_year),same_year)
year_data <- do.call(cbind,updated_same_year)
year_data <- year_data[,2:NCOL(year_data)]# dropping dummy column
colnames(year_data) <- paste0('Y',unique(lubridate::year(df_sample)))
q <- visualize_dataframe_all_columns_facet_form(year_data,ncol=3)
library(ggplot2)
library(scales)
visualize_dataframe_all_columns <- function(xts_data) {
library(RColorBrewer)# to increase no. of colors
library(plotly)
# VISUALIZE SPECiFIC PORTION OF DATA
#http://novyden.blogspot.in/2013/09/how-to-expand-color-palette-with-ggplot.html
#dframe <- data_10min["2014-08-9"]
dframe <- data.frame(timeindex=index(xts_data),coredata(xts_data))
# dframe$dataid <- NULL ; dframe$air1 <-NULL ; dframe$use<- NULL ; dframe$drye1 <- NULL
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
colourCount = length(unique(df_long$variable))
getPalette = colorRampPalette(brewer.pal(8, "Dark2"))(colourCount) # brewer.pal(8, "Dark2") or brewer.pal(9, "Set1")
g <- ggplot(df_long,aes(timeindex,value,col=variable,group=variable))
g <- g + geom_line() + scale_colour_manual(values=getPalette)
ggplotly(g)
}
visualize_month_data_facet_form <- function(df,column_name){
month_data <- df
month_data <- month_data[,column_name]
colnames(month_data) <- "power"
#browser()
month_data$day <- lubridate::day(index(month_data))
month_data$time <- lubridate::hour(index(month_data)) * 60 + lubridate::minute(index(month_data))
# df_long <- reshape2::melt(coredata(month_data),id.vars=c("time","day"))
g <- ggplot(as.data.frame(coredata(month_data)),aes(time,power)) + geom_line() + facet_wrap(~day,ncol=7)
print(g)
}
visualize_dataframe_one_column_facet_form <- function(xts_data,ncol) {
data <- xts_data/1000
dframe <- data.frame(timeindex=index(data),coredata(data))
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
df_long$month <- lubridate::month(df_long$timeindex)
g <- ggplot(df_long,aes(timeindex,value,group=variable)) + facet_wrap(~month,ncol = ncol,scales="free_x") + geom_line()
g <- g + labs(x= "Day of the month", y="Power (kW)") + scale_x_datetime(labels=date_format("%d"))
g
}
visualize_dataframe_all_columns_facet_form <- function(xts_data,ncol) {
data <- xts_data/1000
dframe <- data.frame(timeindex=index(data),coredata(data))
df_long <- reshape2::melt(dframe,id.vars = "timeindex")
df_long$month <- lubridate::month(df_long$timeindex)
g <- ggplot(df_long,aes(timeindex,value,col=variable,group=variable)) + facet_wrap(~month,ncol = ncol,scales="free_x") + geom_line()
g <- g + labs(x= "Day of the month",y="Power (kW)") + scale_x_datetime(labels=date_format("%d"))
g
}
q <- visualize_dataframe_all_columns_facet_form(year_data,ncol=3)
getwd()
ggsave("faciliites_build.pdf",q,width=15,height = 20,units= c("cm"))
years <- c('Y2013','Y2014','Y2015','Y2016','Y2017')
for ( i in 1:length(years)) {
p <- visualize_dataframe_one_column_facet_form(year_data[,years[i]],ncol=3)
ggsave(paste0("facilities_build_",years[i],".pdf"),p,width=15,height = 20,units= c("cm"))
#ggsave("acad_build_year2013.pdf",p,width=15,height = 20,units= c("cm"))
}
direc  = "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/power/"
file = "library_build_mains.csv"
df = fread(paste0(direc,file))
df_xts <- xts(df$power,fasttime::fastPOSIXct(df$timestamp)-19800) # subtracting5:30 according to IST
df_sample <- resample_data_minutely(df_xts,15) #downsample
df_year <- split.xts(df_sample,f="years",k=1) # yearwise break
# fill missing readings with NA
df_year_full <- lapply(df_year,function(x) fill_missing_readings_with_NA(x,"15 mins"))
#set all years to a defualt year
same_year <- lapply(df_year_full, function(y) {
change_year(y)
})
dummy_year <- create_year_data_NA('2016','15 mins') #create dummy year NA data
updated_same_year <- c(list(dummy_year),same_year)
year_data <- do.call(cbind,updated_same_year)
year_data <- year_data[,2:NCOL(year_data)]# dropping dummy column
colnames(year_data) <- paste0('Y',unique(lubridate::year(df_sample)))
q <- visualize_dataframe_all_columns_facet_form(year_data,ncol=3)
ggsave("library_build.pdf",q,width=15,height = 20,units= c("cm"))
years <- c('Y2013','Y2014','Y2015','Y2016','Y2017')
for ( i in 1:length(years)) {
p <- visualize_dataframe_one_column_facet_form(year_data[,years[i]],ncol=3)
ggsave(paste0("library_build_",years[i],".pdf"),p,width=15,height = 20,units= c("cm"))
#ggsave("acad_build_year2013.pdf",p,width=15,height = 20,units= c("cm"))
}
direc  = "/Volumes/MacintoshHD2/Users/haroonr/Detailed_datasets/IIIT_dataset/power/"
file = "mess_build_mains.csv"
df = fread(paste0(direc,file))
df_xts <- xts(df$power,fasttime::fastPOSIXct(df$timestamp)-19800) # subtracting5:30 according to IST
df_sample <- resample_data_minutely(df_xts,15) #downsample
df_year <- split.xts(df_sample,f="years",k=1) # yearwise break
# fill missing readings with NA
df_year_full <- lapply(df_year,function(x) fill_missing_readings_with_NA(x,"15 mins"))
#set all years to a defualt year
same_year <- lapply(df_year_full, function(y) {
change_year(y)
})
dummy_year <- create_year_data_NA('2016','15 mins') #create dummy year NA data
updated_same_year <- c(list(dummy_year),same_year)
year_data <- do.call(cbind,updated_same_year)
year_data <- year_data[,2:NCOL(year_data)]# dropping dummy column
colnames(year_data) <- paste0('Y',unique(lubridate::year(df_sample)))
q <- visualize_dataframe_all_columns_facet_form(year_data,ncol=3)
ggsave("mess_build.pdf",q,width=15,height = 20,units= c("cm"))
years <- c('Y2013','Y2014','Y2015','Y2016','Y2017')
for ( i in 1:length(years)) {
p <- visualize_dataframe_one_column_facet_form(year_data[,years[i]],ncol=3)
ggsave(paste0("mess_build_",years[i],".pdf"),p,width=15,height = 20,units= c("cm"))
#ggsave("acad_build_year2013.pdf",p,width=15,height = 20,units= c("cm"))
}
